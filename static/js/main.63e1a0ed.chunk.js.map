{"version":3,"sources":["app_component/weathercomp.jsx","app_component/formcomponent.jsx","App.js","index.js"],"names":["minmax","min","max","temp","humidity","pressure","className","Weather","props","city","weatherIcon","temperature","desc","Form","error","class","role","onSubmit","loadWeather","type","placeholder","name","autoComplete","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","calCelcius","main","temp_min","temp_max","weather","description","get_WeatherIcon","id","state","undefined","icon","ThunderStorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeId","this","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAsBA,SAASA,EAAOC,EAAIC,EAAIC,EAAKC,EAASC,GAClC,GAAGJ,GAAOC,GAAOC,EACb,OACI,gCACI,+BACA,gCACA,iCAAOA,EAAP,WACA,+BAAM,gDAA4B,0BAElC,uBAAMG,UAAU,OAAhB,UAAwBL,EAAxB,WACA,uBAAMK,UAAU,OAAhB,UAAwBJ,EAAxB,cAEJ,+BACI,sBAAMI,UAAU,OAAhB,oBACA,sBAAMA,UAAU,OAAhB,mBACA,+BACA,+BACD,uBACA,uBAAMA,UAAU,OAAhB,wBACYF,EADZ,OAIA,uBAAME,UAAU,OAAhB,wBACYD,EADZ,oBAiBAE,MA3DC,SAACC,GACb,OACI,qBAAKF,UAAU,YAAf,SACG,sBAAKA,UAAU,QAAf,UACA,4BAAG,yBACH,6BAAKE,EAAMC,OACX,oBAAIH,UAAU,OAAd,SACK,mBAAGA,UAAS,cAAUE,EAAME,YAAhB,kBAGhBV,EAAOQ,EAAMP,IAAIO,EAAMN,IAAIM,EAAMG,YAAYH,EAAMJ,SAASI,EAAMH,UACnE,qBAAIC,UAAU,OAAd,UACKE,EAAMI,KAAK,gC,MCuBZC,MAlCF,SAACL,GACV,OACI,sBAAKF,UAAU,YAAf,UACA,8BACKE,EAAMM,MAuBX,qBAAKC,MAAM,sBAAsBC,KAAK,QAAtC,4CAvB4B,OAE5B,sBAAMC,SAAUT,EAAMU,YAAtB,SACA,sBAAKZ,UAAU,MAAf,UACI,qBAAKA,UAAU,uBAAf,SACI,uBAAOa,KAAK,OAAOC,YAAY,OAAQd,UAAU,eAAee,KAAK,OAAOC,aAAa,UAE7F,qBAAKhB,UAAU,WAAf,SACI,uBAAOa,KAAK,OAAOC,YAAY,UAAUd,UAAU,eAAee,KAAK,UAAUC,aAAa,UAElG,sBAAKhB,UAAU,qBAAf,UAAoC,uBACpC,wBAAQS,MAAM,kBAAkBI,KAAK,SAArC,qCC2GGI,G,8DAlHb,aAAc,IAAD,8BACX,gBAyDFC,WA1Da,uCA0DF,WAAMC,GAAN,qBAAAC,EAAA,yDACTD,EAAEE,iBACIlB,EAAKgB,EAAEG,OAAOC,SAASpB,KAAKqB,MAC5BC,EAAQN,EAAEG,OAAOC,SAASE,QAAQD,OAErCrB,IAAQsB,EALF,iCAQeC,MAAM,oDAAD,OAC2BvB,EAD3B,YACmCsB,EADnC,kBAtEnB,qCA8DD,cAQDE,EARC,gBAWgBA,EAASC,OAXzB,OAWDC,EAXC,OAYPC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZ7B,KAAK,GAAD,OAAI0B,EAASd,KAAb,YAAqBc,EAASI,IAAIR,SACtCpB,YAAY,EAAK6B,WAAWL,EAASM,KAAKtC,MAC1CF,IAAI,EAAKuC,WAAWL,EAASM,KAAKC,UAClCxC,IAAI,EAAKsC,WAAWL,EAASM,KAAKE,UAClC/B,KAAKuB,EAASS,QAAQ,GAAGC,YACzBzC,SAAS+B,EAASM,KAAKrC,SACvBC,SAAS8B,EAASM,KAAKpC,SACvBS,OAAM,IAGR,EAAKgC,gBAAgB,EAAKpC,YAAYyB,EAASS,QAAQ,GAAGG,IAxBnD,wBA4BP,EAAKT,SAAS,CAACxB,OAAM,IA5Bd,4CA1DE,sDAEX,EAAKkC,MAAM,CACTvC,UAAKwC,EACLlB,aAAQkB,EACRtC,iBAAYsC,EACZhD,SAAIgD,EACJ/C,SAAI+C,EACJrC,KAAK,GACLsC,UAAKD,EACL7C,cAAS6C,EACT5C,cAAS4C,EACTnC,OAAM,GAER,EAAKJ,YAAY,CACfyC,aAAa,kBACbC,QAAQ,WACRC,KAAK,mBACLC,KAAK,UACLC,WAAW,SACXC,MAAM,eACNC,OAAO,cArBE,E,8CAyBb,SAAWtD,GAET,OADSuD,KAAKC,MAAMxD,EAAK,U,6BAI3B,SAAgByD,EAAMC,GACpB,QAAO,GACL,KAAKA,GAAW,KAAOA,GAAU,IAC/BC,KAAKxB,SAAS,CAACY,KAAKY,KAAKpD,YAAYyC,eACrC,MACF,KAAKU,GAAW,KAAOA,GAAU,IAC/BC,KAAKxB,SAAS,CAACY,KAAKY,KAAKpD,YAAY0C,UACrC,MACF,KAAKS,GAAW,KAAOA,GAAU,IAC/BC,KAAKxB,SAAS,CAACY,KAAKY,KAAKpD,YAAY2C,OACrC,MACF,KAAKQ,GAAW,KAAOA,GAAU,IAC/BC,KAAKxB,SAAS,CAACY,KAAKY,KAAKpD,YAAY4C,OACrC,MACF,KAAKO,GAAW,KAAOA,GAAU,IAC/BC,KAAKxB,SAAS,CAACY,KAAKY,KAAKpD,YAAY6C,aACrC,MACF,KAAgB,KAAXM,EACHC,KAAKxB,SAAS,CAACY,KAAKY,KAAKpD,YAAY8C,QACrC,MACF,KAAKK,GAAW,KAAOA,GAAU,IAC/BC,KAAKxB,SAAS,CAACY,KAAKY,KAAKpD,YAAY+C,Y,oBAyC3C,WACE,OACE,sBAAKnD,UAAU,MAAf,UACA,uBACA,6CAAoB,uBACpB,cAAC,EAAD,CAAMY,YAAa4C,KAAKtC,WAAYV,MAAOgD,KAAKd,MAAMlC,QACtD,cAAC,EAAD,CACAL,KAAMqD,KAAKd,MAAMvC,KACjBE,YAAamD,KAAKd,MAAMrC,YACxBV,IAAK6D,KAAKd,MAAM/C,IAChBC,IAAK4D,KAAKd,MAAM9C,IAChBU,KAAMkD,KAAKd,MAAMpC,KACjBR,SAAU0D,KAAKd,MAAM5C,SACrBC,SAAUyD,KAAKd,MAAM3C,SACrBK,YAAaoD,KAAKd,MAAME,c,GA5GZa,IAAMC,YCLxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.63e1a0ed.chunk.js","sourcesContent":["import React from 'react'\r\n \r\nconst Weather = (props) => {\r\n    return (\r\n        <div className=\"container\">\r\n           <div className=\"cards\">\r\n           <p><br></br></p>\r\n           <h3>{props.city}</h3>\r\n           <h5 className=\"py-4\">\r\n                <i className= {` wi ${props.weatherIcon} display-4`}></i>\r\n           </h5>\r\n           \r\n           {minmax(props.min,props.max,props.temperature,props.humidity,props.pressure)}\r\n           <h3 className=\"py-2\">\r\n               {props.desc}<br></br>\r\n              \r\n           </h3>\r\n           </div>\r\n                         \r\n        </div>\r\n    );\r\n}\r\nfunction minmax(min,max,temp,humidity,pressure ){\r\n    if(min && max && temp){\r\n        return(\r\n            <div>\r\n                <h3>\r\n                <div>\r\n                <span>{temp}&deg;C</span>\r\n                <span><h6>(Ideal temp)</h6></span><br></br>\r\n                </div>\r\n                <span className=\"px-4\">{min}&deg;C</span>\r\n                <span className=\"px-4\">{max}&deg;C</span>\r\n            </h3>\r\n            <h6>\r\n                <span className=\"px-4\">(min) </span>\r\n                <span className=\"px-4\">(max)</span>\r\n                <span>\r\n                <h6>\r\n               <br></br>\r\n               <span className=\"px-4\" >\r\n               Humidity : {humidity}%\r\n               </span>\r\n               \r\n               <span className=\"px-3\" >\r\n               Pressure : {pressure} Pa\r\n               </span>\r\n               \r\n               </h6>\r\n                </span>\r\n            </h6>\r\n\r\n            </div>\r\n           \r\n        )\r\n\r\n    }\r\n\r\n   \r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\nimport \"./formstyle.css\";\r\n\r\nconst Form = (props) => {\r\n    return (\r\n        <div className=\"container\">\r\n        <div>\r\n            {props.error ? error() :null}\r\n        </div>\r\n        <form onSubmit={props.loadWeather}>\r\n        <div className=\"row\">\r\n            <div className=\"col-md-4 offset-md-2\">\r\n                <input type=\"text\" placeholder=\"City\"  className=\"form-control\" name=\"city\" autoComplete=\"off\" />\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n                <input type=\"text\" placeholder=\"Country\" className=\"form-control\" name=\"country\" autoComplete=\"off\" />\r\n            </div>\r\n            <div className=\"col-md-12 mt-md-0 \"><br></br>\r\n            <button class=\"btn btn-primary\" type=\"submit\">Get Results</button>\r\n            </div> \r\n            </div>  \r\n\r\n        </form>\r\n                    \r\n        </div>\r\n    )\r\n}\r\n\r\nfunction error() {\r\n    return(\r\n        <div class=\"alert alert-warning\" role=\"alert\">\r\nPlease Enter City and Country!</div>\r\n        \r\n    );\r\n    \r\n};\r\n\r\nexport default Form;\r\n","import './App.css';\nimport React from 'react'\nimport Weather from './app_component/weathercomp';\nimport Form from './app_component/formcomponent';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'weather-icons/css/weather-icons.css';\n\nconst API_key=\"3d98d85878bdbb634ce3ca6800c1e730\";\n\nclass App extends React.Component {\n\n  constructor(){\n    super();\n    this.state={\n      city:undefined,\n      country:undefined,\n      temperature:undefined,\n      min:undefined,\n      max:undefined,\n      desc:\"\",\n      icon:undefined,\n      humidity:undefined,\n      pressure:undefined,\n      error:false,\n    };\n    this.weatherIcon={\n      ThunderStorm:\"wi-thunderstorm\",\n      Drizzle:\"wi-sleet\",\n      Rain:\"wi-storm-showers\",\n      Snow:\"wi-snow\",\n      Atmosphere:\"wi-fog\",\n      Clear:\"wi-day-sunny\",\n      Clouds:\"wi-day-fog\"\n    };\n  }\n\n  calCelcius(temp){\n    let cell=Math.floor(temp-273.15);\n    return cell;\n  }\n\n  get_WeatherIcon(icons,rangeId){\n    switch(true){\n      case rangeId >= 200 && rangeId <=232:\n        this.setState({icon:this.weatherIcon.ThunderStorm});\n        break;\n      case rangeId >= 300 && rangeId <=321:\n        this.setState({icon:this.weatherIcon.Drizzle});\n        break;\n      case rangeId >= 500 && rangeId <=531:\n        this.setState({icon:this.weatherIcon.Rain});\n        break;\n      case rangeId >= 600 && rangeId <=622:\n        this.setState({icon:this.weatherIcon.Snow});\n        break;\n      case rangeId >= 700 && rangeId <=781:\n        this.setState({icon:this.weatherIcon.Atmosphere});\n        break;\n      case rangeId == 800:\n        this.setState({icon:this.weatherIcon.Clear});\n        break;\n      case rangeId >= 801 && rangeId <=804:\n        this.setState({icon:this.weatherIcon.Clouds});\n        break;\n      \n       \n    }\n  }\n\n  getWeather=async(e)=>{\n    e.preventDefault();\n    const city=e.target.elements.city.value;\n    const country=e.target.elements.country.value;\n\n    if(city && country)\n    {\n\n      const api_call= await fetch(\n        `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`\n        );\n      const response = await api_call.json();\n      console.log(response);\n      this.setState({\n        city:`${response.name},${response.sys.country}`,\n        temperature:this.calCelcius(response.main.temp),\n        min:this.calCelcius(response.main.temp_min),\n        max:this.calCelcius(response.main.temp_max),\n        desc:response.weather[0].description,\n        humidity:response.main.humidity,\n        pressure:response.main.pressure,\n        error:false,\n        \n      });\n      this.get_WeatherIcon(this.weatherIcon,response.weather[0].id);\n\n    }\n    else{\n      this.setState({error:true})\n    }\n\n     \n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n      <br></br>\n      <h1>Weather App</h1><br></br>\n      <Form loadWeather={this.getWeather} error={this.state.error} />\n      <Weather \n      city={this.state.city} \n      temperature={this.state.temperature}\n      min={this.state.min}\n      max={this.state.max}\n      desc={this.state.desc}\n      humidity={this.state.humidity}\n      pressure={this.state.pressure}\n      weatherIcon={this.state.icon}\n       />\n       \n      \n    </div>\n    )\n  }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}